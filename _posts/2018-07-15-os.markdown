---    
layout: post
title:  "操作系统基础知识的小笔记"
date:   2018-07-16 00:00:00
categories: OperatingSystem
tags: OperatingSystem
excerpt: 
---

### 1 用户空间与内核空间

操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。
为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，
一部分为内核空间，一部分为用户空间。

处于用户态的程序只能访问用户空间，而处于内核态的程序可以访问用户空间和内核空间。

虚拟内存：在程序装入时，可以将程序的一部分装入内存，而将其余部分留在外存，就可以启动程序执行。在程序执行过程中，当所访问的信息不在内存时，由操作系统将所需要的部分调入内存,然后继续执行程序。  
每个进程只能访问自己虚拟地址空间中的数据，无法访问别的进程中的数据，通过这种方法实现了进程间的地址隔离。

局部性原理：是指程序在执行时呈现出局部性规律，即在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。局部性原理又表现为：时间局部性和空间局部性。时间局部性是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。空间局部性是指一旦程序访问了某个存储单元，则不久之后。其附近的存储单元也将被访问。

分段与分页机制：  
将程序所需要的内存空间大小的虚拟空间，通过映射机制映射到某个物理地址空间。  
对于分页，为了能在内存中找到每个页面对应的物理块，系统为每个进程建立一张页表，用于记录进程逻辑页面与内存物理页面之间的对应关系。  
页是信息的物理单位，页的大小是固定的。段是信息的逻辑单位，每个段含有一组意义完整的信息，是出于用户角度提出的内存管理机制。
分页存在内部碎片，分段存在外部碎片。
段向用户提供二维地址空间；页向用户提供的是一维地址空间；

快表可以用来加快虚拟地址到物理地址的转换。

怎样处理巨大的虚拟地址空间：
1. 多级页表：避免把全部页表一直保存在内存中。
2. 倒排页表：根据物理地址来找逻辑地址，使用哈希函数来映射。
虽然节省了大量空间，虚拟地址到物理地址的转换需要搜索整个倒排页表查找。优化办法是使用快表。



### 2 select、poll、epoll

一次IO访问（以read举例）有两个阶段：（1）等待数据准备（2）将数据从内核拷贝到进程中。

select，poll，epoll都是IO多路复用的机制。
I/O多路复用就是一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。

1. select  
调用后select函数会阻塞，直到有描述副就绪或者超时，函数返回。当select函数返回后，可以通过遍历fd集合，来找到就绪的描述符。  
select的缺点在于单个进程能够监视的文件描述符的数量存在最大限制。以及每次调用select，都需要把fd集合从用户态拷贝到内核态，并逐一遍历。

2. poll  
poll并没解决性能问题，poll只是解决了select的fd集合大小限制。  

3. epoll  
select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，而epoll调用epoll_wait不断轮询就绪链表。  
epoll只在epoll_ctl时把fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。  
epoll没有fd集合大小限制问题。

### 3 进程与线程

进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位。

同一进程中的所有线程都具有相同的地址空间（进程的地址空间）。

线程共享进程的资源（例如进程代码段、打开的文件），同时拥有自己的id、堆栈、优先级等。

进程的几种状态：就绪、运行、阻塞、终止。

线程可以分为两类：用户级线程和内核级线程，区别如下
1. 内核线程OS内核可感知，而用户级线程OS内核不可感知。用户级线程可以在不支持线程的操作系统中实现。  
2. 在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。  
3. 内核线程和普通的进程间的区别在于内核线程没有独立的地址空间，因此切换上下文的开销比用户级线程大。  
4. 内核级线程由内核进行调度，用户级线程允许每个进程定制自己的调度算法。

### 4 线程同步

1. 锁（mutex）:互斥锁保证进程互斥地访问一个资源，读写锁允许多个读者读共享内存而只有一个写者写内存。
2. 条件变量：条件变量用来阻塞一个线程，直到某一特殊条件发生为止。例如生产者消费者。

顺便说一下死锁四个必要条件（有一个条件不成立，则不会产生死锁；有死锁则满足下面四个条件）：
1. 互斥
2. 占有并等待
3. 非抢占
4. 循环等待：若干进程之间形成一种头尾相接的环形等待资源关系 


#### 4.1 生产者消费者

需要注意的几点：
1. 使用`std::unique_lock<std::mutex> lck (mtx);`加锁访问存放物品的队列
2. 当队列为空时，消费者使用`std::condition_variable`的wait方法阻塞当前线程，并释放锁，使得其他被阻塞在锁竞争上的线程得以继续执行。  
为了避免虚假唤醒需要使用while循环：
```cpp
while (queue.empty()){
    cv.wait(lck);
}
```
3. 当生产者生产新的物品时，调用cv.notify_all()或者cv.notify_one()来唤醒线程


虚假唤醒例子：  
有三个线程在等待一个队列，有以下情况发生：
1. 线程1在取到queue元素之后去做处理，之后queue为空
2. 线程2判断queue是否为空，此时queue为空，此时线程2阻塞在wait上
3. 线程3开始向queue里添加一个元素，然后调用notify
4. 此时阻塞在wait上的线程2被唤醒获取queue lock之前，如果这个时候线程1恰好处理完毕然后获取锁重新取queue里的元素
5. 如果在线程2唤醒并获取queue lock之后，在其取走queue里的元素之前线程1已经将元素取走，这个时候线程2就出现了虚假唤醒

notify_all与notify_one区别：  
notify_all: Only one thread will lock the mutex at a time, but they'll all return from the wait as soon as they get the mutex

#### 4.2 读写锁

```cpp
boost::shared_mutex mutex;
void read() {
    boost::shared_lock<boost::shared_mutex> read_lock(mutex);
    ...
}
void write() {
    boost::unique_lock<boost::shared_mutex> read_lock(mutex);
    ...
}
```

shared_lock是读锁，被锁后仍允许其他线程执行同样被shared_lock的代码。这是一般做读操作时的需要。

unique_lock是写锁。被锁后不允许其他线程执行被shared_lock或unique_lock的代码。这是一般做写操作时的需要。


### 5 进程间通信方式

管道、系统IPC（信号、共享内存等）、socket

### 6 fork

父进程调用fork函数创建子进程，这两个进程将执行相同的代码，子进程的栈、数据以及堆栈是父进程内存相应各部分的拷贝，它们互不影响。


### 7 操作系统中进程调度策略

1. 先来先服务（FCFS）：有利于长作业，而不利于短作业。
2. 短作业优先：对短作业优先调度的算法，对长作业不利。
3. 优先级调度：基于进程优先级。又分抢占式和非抢占式。
4. 时间片轮转：linux中的nice值，代表的是时间片的比例，因此越小的nice值，占有CPU的时间也就会越长。


### 8 页面置换算法

1. 先进先出（FIFO）：先进入内存的页，先退出内存。
2. 最近最少使用（LRU）：
```cpp
class LRUCache {
public:
    LRUCache(int capacity) : capacity(capacity) {}
    int get(int key) {
        if (kv_map.find(key) == kv_map.end()) {
            return -1;
        }
        l.erase(ki_map[key]);
        l.push_front(key);
        ki_map[key] = l.begin();
        return kv_map[key];
    }
    void put(int key, int value) {
        if (kv_map.find(key) != kv_map.end()) {
            l.erase(ki_map[key]);
        } else if (kv_map.size() >= capacity) {
            kv_map.erase(l.back());
            ki_map.erase(l.back());
            l.pop_back();
        }
        l.push_front(key);
        kv_map[key] = value;
        ki_map[key] = l.begin();
    }
private:
    unordered_map<int, int> kv_map;
    unordered_map<int, list<int>::iterator> ki_map;
    list<int> l;
    int capacity;
};
```
3. 第二次机会
当选择置换页面时，检查它的访问位。如果是0，就淘汰这页；如果访问位是1，就给它第二次机会，并选择下一个FIFO页面。当一个页面得到第二次机会时，它的访问位就清为0。  
如果一个页面经常使用，它的访问位就经常保持为1，不会被淘汰出去。

