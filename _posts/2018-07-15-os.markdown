---    
layout: post
title:  "操作系统基础知识的小笔记"
date:   2018-07-16 00:00:00
categories: OperatingSystem
tags: OperatingSystem
excerpt: 
---

### 1 用户空间与内核空间

操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。
为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，
一部分为内核空间，一部分为用户空间。

处于用户态的程序只能访问用户空间，而处于内核态的程序可以访问用户空间和内核空间。

每个进程只能访问自己虚拟地址空间中的数据，无法访问别的进程中的数据，通过这种方法实现了进程间的地址隔离。

分段与分页机制：  
将程序所需要的内存空间大小的虚拟空间，通过映射机制映射到某个物理地址空间。  
对于分页，为了能在内存中找到每个页面对应的物理块，系统为每个进程建立一张页表，用于记录进程逻辑页面与内存物理页面之间的对应关系。  


### 2 select、poll、epoll

一次IO访问（以read举例）有两个阶段：（1）等待数据准备（2）将数据从内核拷贝到进程中。

select，poll，epoll都是IO多路复用的机制。
I/O多路复用就是一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。

1. select  
调用后select函数会阻塞，直到有描述副就绪或者超时，函数返回。当select函数返回后，可以通过遍历fd集合，来找到就绪的描述符。  
select的缺点在于单个进程能够监视的文件描述符的数量存在最大限制。以及每次调用select，都需要把fd集合从用户态拷贝到内核态，并逐一遍历。

2. poll  
poll并没解决性能问题，poll只是解决了select的fd集合大小限制。  

3. epoll  
select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，而epoll调用epoll_wait不断轮询就绪链表。  
epoll只在epoll_ctl时把fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。  
epoll没有fd集合大小限制问题。

### 3 进程与线程

进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位。

同一进程中的所有线程都具有相同的地址空间（进程的地址空间）。

线程共享进程的资源（例如进程代码段、打开的文件），同时拥有自己的id、堆栈、优先级等。

进程的几种状态：就绪、运行、阻塞、终止。

线程可以分为两类：用户级线程和内核级线程，区别如下
1. 内核线程OS内核可感知，而用户级线程OS内核不可感知。用户级线程可以在不支持线程的操作系统中实现。  
2. 在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。  
3. 内核线程和普通的进程间的区别在于内核线程没有独立的地址空间，因此切换上下文的开销比用户级线程大。  
4. 内核级线程由内核进行调度，用户级线程允许每个进程定制自己的调度算法。

### 4 线程同步

1. 锁（mutex）:互斥锁保证进程互斥地访问一个资源，读写锁允许多个读者读共享内存而只有一个写者写内存。
2. 条件变量：条件变量用来阻塞一个线程，直到某一特殊条件发生为止。例如生产者消费者。

顺便说一下死锁四个必要条件（有一个条件不成立，则不会产生死锁；有死锁则满足下面四个条件）：
1. 互斥
2. 占有并等待
3. 非抢占
4. 循环等待：若干进程之间形成一种头尾相接的环形等待资源关系 


#### 4.1 生产者消费者


#### 4.2 读写锁


### 5 进程间通信方式

管道、系统IPC（信号、共享内存等）、socket

### 6 fork

### 7 操作系统中进程调度策略

### 8 页面置换算法
