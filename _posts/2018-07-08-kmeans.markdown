---    
layout: post
title:  "常见聚类算法"
date:   2018-07-08 11:00:00
categories: MachineLearning
tags: MachineLearning
excerpt: 
---

# K-Means

## 算法流程：

输入：N个数据点， 类簇个数K

输出：K个类簇的均值向量

流程：

1. 随机选择K个样本点作为初始的均值向量(即中心点)

2. 不断循环以下步骤，直到收敛（达到最大迭代轮数或者均值向量的调整幅度小于阈值）

3. 对每个样本点i，计算离它最近的均值向量$$ C_k $$，并将样本点i归为第k类

4. 计算每个类簇新的中心点（取均值）


## 聚类的评价指标(不仅限于KMeans)

无监督聚类算法的评价指标大致可以分为两大类：一类是，聚类的结果具有某个参考模型作为人为基准进行比较，称之为外部指标；第二种是：直接考察聚类结果而不参考任何模型，称之为内部指标。

### 外部指标

假定通过聚类算法将样本聚为一个类簇的集合$$ C $$，参考的已有模型将样本聚为一个类簇的集合$$ C^{\star} $$。
对于每两个样本

\begin{align}
a&=\vert S_1 \vert, 其中 S_1=\\{(x_i,x_j) \vert \lambda_i = \lambda_j,\lambda_{i}^{\star} = \vert \lambda_j^{\star},i<j\\} \\\
b&=\vert S_2 \vert, 其中 S_2=\\{(x_i,x_j) \vert \lambda_i = \lambda_j,\lambda_{i}^{\star} != \vert \lambda_j^{\star},i<j\\} \\\
c&=\vert S_3 \vert, 其中 S_3=\\{(x_i,x_j) \vert \lambda_i != \lambda_j,\lambda_{i}^{\star} = \vert \lambda_j^{\star},i<j\\} \\\
d&=\vert S_4 \vert, 其中 S_4=\\{(x_i,x_j) \vert \lambda_i != \lambda_j,\lambda_{i}^{\star} != \vert \lambda_j^{\star},i<j\\} 
\end{align}

其中集合$$ S_1 $$包含了在$$ C $$中属于相同的簇并且在$$ C^{\star} $$中也属于相同的簇的样本  
$$ S_2 $$包含了在$$ C $$中属于相同的簇并且在$$ C^{\star} $$中不属于相同的簇的样本  
$$ S_3 $$包含了在$$ C $$中不属于相同的簇并且在$$ C^{\star} $$中属于相同的簇的样本  
$$ S_4 $$包含了在$$ C $$中不属于相同的簇并且在$$ C^{\star} $$中不属于相同的簇的样本  

基于jaccard的评价指标为$$ JCI = \frac{a}{a+b+c} $$，该值在[0,1]之间，并且值越大越好。


### 内部指标

每两个类簇之间，类簇内的节点间平均距离 除以 这两个类簇中心点的距离。

\begin{align}
 DBI=\frac{1}{k}\sum_{i=1}^k\max_{j\ne i}\bigl(\frac{avg(C_i)+avg(C_j)}{d_{cen}(\mu_i,\mu_j)}\bigl) 
\end{align}

其中$$ \mu $$表示中心点。上面这个式子的值越小越好。

## 如何确定K的值呢

如果设定的K值小于真实簇数量，随着K的增加，指标会迅速提升

而如果设定的K值大于真实簇数量，随着K的增加，指标提升会变缓

由此可以找到一个较好的K值


## 初始化中心点

除了随机初始化外，还可以采用Canopy方法：

设置两个阈值$$ T_1 > T_2 $$

流程：

（1）将所有数据点作为一个集合

（2）迭代至集合为空  
1. 从集合中随机选取一个点作为簇的中心
2. 对剩余的每个数据点，如果其与某个簇的距离小于$$ T_1 $$，归到该簇中
3. 如果其与该簇的距离小于$$ T_2 $$，从集合中删除这个点


可以看出Canopy优点是不需要实现确定K值，缺点是需要设置$$ T_1 $$和$$ T_2 $$，
$$ T_2 $$的值如果过小经常会导致簇的个数过多。

### 分布式实现

1. 首先由某一机器（比如0号机器）随机选取K个中心点，然后广播给其他机器

2. 计算每个节点与中心点的距离，并归入最小距离对应的中心点的类簇中

3. 计算每个类簇的新的中心点（求均值向量）

个人认为对第3步来说，如果节点数目太多，向量每个维度求和，最后才除以个数求平均的话，可能溢出了，
所以可以每个机器分别求均值，然后所有机器再求一次均值。

# DBSCAN




# 参考资料

[https://www.cnblogs.com/549294286/p/3622097.html](https://www.cnblogs.com/549294286/p/3622097.html)

[http://willzhang4a58.github.io/2016/06/kmeans/](http://willzhang4a58.github.io/2016/06/kmeans/)

[https://blog.csdn.net/cokeonly/article/details/70173567](https://blog.csdn.net/cokeonly/article/details/70173567)