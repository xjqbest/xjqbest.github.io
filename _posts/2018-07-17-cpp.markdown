---    
layout: post
title:  "c++基础知识的小笔记"
date:   2018-07-17 00:00:00
categories: C++
tags: C++
excerpt: 
---

### inline Function

为了解决一些频繁调用的小函数大量消耗栈空间的问题，引入了inline修饰符。

inline函数仅仅是一个对编译器的建议，所以最后能否真正内联，看编译器。

如果用了太多的inline函数，编译出来的可执行文件由于冗余代码较多，可能比较大。

### Array Decay

假如我们有一个数组`int arr[10];`，
调用函数传参数为指针arr时(例如`void fun(int (&p)[10])`或`void fun(int* p)`)，仅仅传递了数组第一个元素的地址，调用sizeof(arr)是得不到数组长度的。

解决办法是传引用`void fun(int (&p)[10])`

### Functor

仿函数(functor)，就是使一个类的使用看上去像一个函数。实现就是类中实现一个operator()，这个类就有了类似函数的行为。

```cpp
class display
{
public:
    void operator()(const int &x)
    {
        cout << x << endl; 
    } 
}; 
int main()
{
    vector<int> vec = {1,2,3,4,5};
    for_each(vec.begin(), vec.end(), display()); 
    return 0; 
} 
```

### Const member functions

const函数不允许修改类的成员。

non-const函数只能被类的non-const的对象调用。

### References vs Pointers

同：
1. 都可以用来修改它们指向的变量的值。
2. 都可以用来避免函数传参数的复制的开销。

异：
1. 指针可以声明为void，或赋值为NULL
2. 定义引用的时候必须初始化。引用初始化后，便不能再引用其他变量。（可以看出引用无法实现链表等数据结构）

引用的优点：
1. Safer： 由于引用必须被初始化，因此没有野指针（未被初始化的指针）的问题。
2. Easier to use：没有指针的解引用操作，更易用。

### Smart pointer

```cpp
template <class T>
class SmartPtr
{
public:
   // Constructor
   explicit SmartPtr(T *p = NULL) { ptr = p; }
   // Destructor
   ~SmartPtr() { delete(ptr); }
   // Overloading dereferncing operator
   T & operator * () {  return *ptr; }
   // Overloding arrow operator so that members of T can be accessed
   // like a pointer (useful if T represents a class or struct or 
   // union type)
   T * operator -> () { return ptr; }
private:
    T *ptr;  // Actual pointer
};
```

可以有多个shared_ptr实例指向同一块动态分配的内存，当最后一个shared_ptr离开作用域时，才会释放这块内存。shared_ptr也是线程安全的。另一方面，unique_ptr意味着所有权。单个unique_ptr离开作用域时，会立即释放这块内存。

正确的使用方式应该是使用make_unique 或者make_shared和拷贝构造函数建立副本。

shared_ptr与shared_ptr之间，每拷贝一次，引用计数就会+1，而如果使用weak_ptr则不会出现这个现象。如果将一个shared_ptr指针赋值给weak_ptr指针，对shared_ptr指针本身不会造成任何影响。weak_ptr可以用来来探测被赋值过来的shared_ptr指针的有效性（expired函数），同时weak_ptr指针也可以间接操纵shared_ptr指针（lock函数）。

### Void pointer

可以指向任何类型的数据。并且它本身不能被解引用，除非强制类型转换。

### nullptr

```cpp
#include <iostream>
using namespace std;
// function with integer argument
int fun(int N)   { cout << "fun(int)"; }
// Overloaded function with char pointer argument
int fun(char* s)  { cout << "fun(char *)"; }
int main() {
    // Ideally, it should have called fun(char *),
    // but it causes compiler error.
    // error: call of overloaded 'fun(NULL)' is ambiguous
    fun(NULL);  
}
```
问题在于NULL定义为(void *)0，因此它可转换为int。可以使用nullptr解决这个问题，
nullptr可以转换成任何类型的指针，并且可以转换为bool，不可转换为int。


### new vs malloc()

<img src="/images/cpp/1.png" width="57%" height="57%">

大致就是new是一个操作符，会调用构造函数，返回对象的指针而不是void*，申请的内存大小由编译器计算而非手动传入。

delete and free() 分别对应 new 和 malloc

### Empty Class

空类的大小通常为1，保证对象之间是不同的地址。

### 类中的静态数据成员

必须在类外定义。

独立于所有对象而存在，并且不需要对象就可以访问。

### 类中的静态函数

1. 没有this指针  
2. 不能为virtual、const、volatile  
3. 不能基于是否是static来重载

### friend class / friend function

friend class: 可以访问类的private和protected成员  
```cpp
class Node {
private:
  int key;
  Node *next;
  friend class LinkedList; // Now class LinkedList can access private members of Node
};
```

friend function：可以是另一个类的成员函数或者一个全局函数  
```cpp
class Node {
private:
  int key;
  Node *next;
  friend int LinkedList::search(); // Only search() of linkedList can access internal members
};
```

friend关系不可继承。

### 构造函数

变量的初始化顺序是按照声明的顺序，而非初始化列表的中的顺序。

如果人为加了复制构造函数，那么编译器不会生成任何默认构造函数。

如果人为加了构造函数，那么编译器还是会生成默认复制构造函数。

### 复制构造函数

```cpp
ClassName (const ClassName &old_obj); 
```

何时被调用：
1. 函数以值返回对象
2. 函数传参以值传递
3. 一个对象基于另一个对象构造，例如`Object a; Object b = a`

默认的复制构造函数只是浅拷贝，因此如果浅拷贝是ok的，那么没必要手动的写复制构造函数。赋值操作符同理。

我们可以把复制构造函数设为private，那么该类就是non-copyable。

为什么复制构造函数传参是传的引用：因为以值传参需要调用复制构造函数，陷入了循环。

为什么复制构造函数传参是传的const：保证其不被修改。

### 复制构造函数 vs 赋值操作符

复制构造函数：新对象从现有对象构造时  
赋值操作符：为已存在的对象赋值

```cpp
MyClass t1, t2;
MyClass t3 = t1;  // 复制构造函数
t2 = t1;          // 赋值操作符
```

### 赋值操作符

编译器在如下情况v不会生成默认赋值操作符：
1. 有non-static const 成员变量
2. 有non-static 引用 成员变量
3. 有non-static 不支持赋值操作符的 成员变量


### 析构函数

何时被调用：
1. 函数结束、程序结束、一个作用域结束
2. delete操作符被调用

何时需要用户手动的写： 有动态分配的内存时。

基类的析构函数通常是viutual，为了保证继承类的对象被正确的释放。

### explict

如果存在只有一个参数的构造函数，那么该构造函数也是隐式转换的构造函数。

为了避免隐式转换，可以将构造函数声明为explict

不过我们依然可以通过显式的类型转换来“显式转换”

### 初始化列表（Initializer List）

何时需要用
1. non-static const 成员变量
2. 引用
3. 没有默认构造函数的成员变量
4. 初始化基类
5. 参数名和成员变量同名
6. 性能考虑：不需要调用某一成员变量的构造函数+赋值操作符，而只需要调用复制构造函数

### static

static对象直到程序结束才会销毁。

### 函数重载

函数名相同，参数不同。类中成员函数可以基于是否是const函数而重载。

#### 哪些情况不能重载：
1. 返回值的不同
2. static成员函数
3. 传递指针与数组，传递函数与函数指针
```cpp
int fun(int *ptr);
int fun(int ptr[]);
// 
void h(int ());
void h(int (*)());
```
4. 参数是否是const或volatile  
但是指向T、指向const T、指向volatile T则被视为不同的参数类型。引用同理。
5. 参数默认值不同

基类和继承类之间不存在函数重载。

###  操作符重载

```cpp
ClassName& operator++() {
    value++;
    return *this;
}
ClassName operator++(int) {
    ClassName ret(*this);
    value++;
    return ret;
}
ClassName& operator=(const ClassName& t) {
    // Check for self assignment
    if(this != &t) {
        *ptr = *(t.ptr);
    }
   return *this;
}
int& operator[](int i) {
    return a[i];
}
bool operator==(const ClassName& t) const {
    ...
}
ClassName* operator->() {
    return this;
}
ClassName operator+(const ClassName& t) {
    ClassName tmp;
    tmp.a = a + t.a;
    return tmp;
}
operator double (){
    return a;
}
```

#### 重载输入输出操作符

首先有两点注意:
1. cout是ostream类的对象，cin是istream类的对象
2. 操作符得是全局函数，否则得是cout/cin的成员函数了。

```cpp
class Test {
private:
    int a;
    friend ostream& operator << (ostream& out, const Test &c);
    friend istream& operator >> (istream& in,  Test &c);
}; 
ostream& operator << (ostream& out, const Test& c) {
    out << c.a;
    return out;
}
istream& operator >> (istream& in, Test& c) {
    cout << "Enter a ";
    in >> c.a;
    return in;
}
int main()
{
   Test c1;
   cin >> c1;
   cout << "The object is ";
   cout << c1;
   return 0;
}
```

如下操作符无法被重载：

<img src="/images/cpp/2.png" width="67%" height="67%">

### virtual function

用来实现运行时的多态。

还包含了两个数据结构：  
1. vtable：每个类维护一个，包含函数指针
2. vptr：每个对象维护一个，指向vtable

当一个函数在基类被声明为virtual后，在所有继承类中都是virtual的，而无论继承类中带不带virtual关键字。

static成员函数不能被声明为virtual、const、volatile（volatile指出变量是随时可能发生变化的，每次使用它的时候必须从它的内存地址中读取；volatile表示这个函数里访问的变量可能由于其他原因发生改变，告诉编译器不要做访问的变量的优化）。

当类中有虚函数的时候，析构函数通常也需要设为虚函数。

利用虚函数可以实现RTTI，c++通过下面两个操作符提供RTTI。
1. typeid：返回指针或引用所指对象的实际类型。
2. dynamic_cast：将基类类型的指针或引用安全的转换为派生类型的指针或引用。

inline：编译时候，在调用函数处展开。通过指针或者引用访问虚函数时是无法展开的，但是通过对象访问是可以的。

pure virtual：赋值为0，不给出实现的虚函数。特例是析构函数，即使设置为纯虚，也需要给出实现。

含有纯虚函数的类被称为抽象类，我们可以使用抽象类的指针或引用，如果我们不override纯虚函数那么继承类也是抽象类

virtual继承：解决菱形问题。